import { compactNumberFormat } from "./compactNumberFormat";

describe("Compact Number Format", () => {
  it("Compact Number Format", () => {
    expect(compactNumberFormat(5.0)).toBe("5");
    expect(compactNumberFormat(103.0)).toBe("103");
    expect(compactNumberFormat(999.0)).toBe("999");
    expect(compactNumberFormat(999.5)).toBe("999.5");
    expect(compactNumberFormat(999.05)).toBe("999.1");
    expect(compactNumberFormat(1000.0)).toBe("1K");
    expect(compactNumberFormat(1000.05)).toBe("1K");
    expect(compactNumberFormat(1000.5)).toBe("1K");
    expect(compactNumberFormat(599)).toBe("599");
    expect(compactNumberFormat(1.1234)).toBe("1.123");
    expect(compactNumberFormat(15.1299)).toBe("15.13");
    expect(compactNumberFormat(159.1234)).toBe("159.1");
    expect(compactNumberFormat(159.999)).toBe("160");
    expect(compactNumberFormat(199.9999)).toBe("200");
    expect(compactNumberFormat(1099.99)).toBe("1.1K");
    expect(compactNumberFormat(1909.99)).toBe("1.9K");
    expect(compactNumberFormat(1999.99)).toBe("2K");
    expect(compactNumberFormat(19999.99)).toBe("20K");
    expect(compactNumberFormat(199.9999)).toBe("200");
    expect(compactNumberFormat(199.9099)).toBe("199.9");
    expect(compactNumberFormat(1999.9999)).toBe("2K");
    expect(compactNumberFormat(1900.0)).toBe("1.9K");
    expect(compactNumberFormat(19999.9999)).toBe("20K");
    expect(compactNumberFormat(199999.9999)).toBe("200K");
    expect(compactNumberFormat(1999999.9999)).toBe("2M");
    expect(compactNumberFormat(19999999.9999)).toBe("20M");
    expect(compactNumberFormat(199999999.9999)).toBe("200M");
  });
  it("Compact Number Format Percentages", () => {
    expect(compactNumberFormat(5.0 / 100, "percent")).toBe("5.0%");
    expect(compactNumberFormat(103.0 / 100, "percent")).toBe("103.0%");
    expect(compactNumberFormat(999.0 / 100, "percent")).toBe("999.0%");
    expect(compactNumberFormat(999.5 / 100, "percent")).toBe("999.5%");
    expect(compactNumberFormat(999.05 / 100, "percent")).toBe("999.05%");
    expect(compactNumberFormat(1000.0 / 100, "percent")).toBe("1K%");
    expect(compactNumberFormat(1000.05 / 100, "percent")).toBe("1K%");
    expect(compactNumberFormat(1000.5 / 100, "percent")).toBe("1K%");
    expect(compactNumberFormat(599 / 100, "percent")).toBe("599.0%");
    expect(compactNumberFormat(1.1234 / 100, "percent")).toBe("1.12%");
    expect(compactNumberFormat(15.1299 / 100, "percent")).toBe("15.13%");
    expect(compactNumberFormat(159.1234 / 100, "percent")).toBe("159.12%");
    expect(compactNumberFormat(159.999 / 100, "percent")).toBe("160.0%");
    expect(compactNumberFormat(199.9999 / 100, "percent")).toBe("200.0%");
    expect(compactNumberFormat(1099.99 / 100, "percent")).toBe("1.1K%");
    expect(compactNumberFormat(1909.99 / 100, "percent")).toBe("1.9K%");
    expect(compactNumberFormat(1999.99 / 100, "percent")).toBe("2K%");
    expect(compactNumberFormat(19999.99 / 100, "percent")).toBe("20K%");
    expect(compactNumberFormat(199.9999 / 100, "percent")).toBe("200.0%");
    expect(compactNumberFormat(199.9099 / 100, "percent")).toBe("199.91%");
    expect(compactNumberFormat(1999.9999 / 100, "percent")).toBe("2K%");
    expect(compactNumberFormat(1900.0 / 100, "percent")).toBe("1.9K%");
    expect(compactNumberFormat(19999.9999 / 100, "percent")).toBe("20K%");
    expect(compactNumberFormat(199999.9999 / 100, "percent")).toBe("200K%");
    expect(compactNumberFormat(1999999.9999 / 100, "percent")).toBe("2M%");
    expect(compactNumberFormat(19999999.9999 / 100, "percent")).toBe("20M%");
    expect(compactNumberFormat(199999999.9999 / 100, "percent")).toBe("200M%");
  });
});
